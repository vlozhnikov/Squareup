//
//  Dispute.swift
//  Squareup
//
//  Created by user on 3.07.23.
//

import Foundation

/// - Dispute: Represents a dispute a cardholder initiated with their bank.
/// https://developer.squareup.com/reference/square/objects/Dispute
open class Dispute: Codable {
    
    /// - DisputeId: Deprecated
    /// The unique ID for this Dispute, generated by Square.
    /// Min Length 1
    /// Max Length 40
    public var DisputeId: String?
    /// - Id: The unique ID for this Dispute, generated by Square.
    /// Min Length 1
    /// Max Length 40
    public var Id: String?
    /// - AmountMoney: The disputed amount, which can be less than the total transaction amount. For instance, if multiple items were purchased but the cardholder only initiates a dispute over some of the items.
    public var AmountMoney: Money?
    /// - Reason: The reason why the cardholder initiated the dispute.
    public var Reason: String?
    /// - State: The current state of this dispute.
    public var State: DisputeState?
    /// - DueAt: The deadline by which the seller must respond to the dispute, in RFC 3339 format.
    /// Min Length 1
    /// Max Length 40
//    var DueAt: Date?
    @FormattedDate<RFC3339_Strategy> public var DueAt: Date?
    /// - disputedPayment: The payment challenged in this dispute.
    public var disputedPayment: DisputedPayment?
    /// - EvidenceIds: Deprecated
    /// The IDs of the evidence associated with the dispute.
    public var EvidenceIds: [String]?
    /// - cardBrand: The card brand used in the disputed payment.
    public var cardBrand: CardBrand?
    /// - CreatedAt: Read only The timestamp when the dispute was created, in RFC 3339 format.
    /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
    ///
    /// UTC: 2020-01-26T02:25:34Z
    ///
    /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
    /// Min Length 1
    /// Max Length 40
//    var CreatedAt: Date?
    @FormattedDate<RFC3339_Strategy> public var CreatedAt: Date?
    /// - UpdatedAt: Read only The timestamp when the dispute was last updated, in RFC 3339 format.
    /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
    ///
    /// UTC: 2020-01-26T02:25:34Z
    ///
    /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
    /// Min Length 1
    /// Max Length 40
//    var UpdatedAt: Date?
    @FormattedDate<RFC3339_Strategy> public var UpdatedAt: Date?
    /// - BrandDisputeId: The ID of the dispute in the card brand system, generated by the card brand.
    /// Min Length 1
    /// Max Length 40
    public var BrandDisputeId: String?
    /// - ReportedDate: Deprecated
    /// The timestamp when the dispute was reported, in RFC 3339 format.
    /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
    ///
    /// UTC: 2020-01-26T02:25:34Z
    ///
    /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
    /// Min Length 1
    /// Max Length 40
//    var ReportedDate: Date?
    @FormattedDate<RFC3339_Strategy> public var ReportedDate: Date?
    /// - ReportedAt: The timestamp when the dispute was reported, in RFC 3339 format.
    /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
    ///
    /// UTC: 2020-01-26T02:25:34Z
    ///
    /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
    /// Min Length 1
    /// Max Length 40
//    var ReportedAt: Date?
    @FormattedDate<RFC3339_Strategy> public var ReportedAt: Date?
    /// - Version: The current version of the Dispute.
    public var Version: Int?
    /// - LocationId: The ID of the location where the dispute originated.
    /// Min Length 1
    /// Max Length 40
    public var LocationId: String?
    
    enum CodingKeys: String, CodingKey {
        case DisputeId = "dispute_id"
        case Id = "id"
        case AmountMoney = "amount_money"
        case Reason = "reason"
        case State = "state"
        case DueAt = "due_at"
        case disputedPayment = "disputed_payment"
        case EvidenceIds = "evidence_ids"
        case cardBrand = "card_brand"
        case CreatedAt = "created_at"
        case UpdatedAt = "updated_at"
        case BrandDisputeId = "brand_dispute_id"
        case ReportedDate = "reported_date"
        case ReportedAt = "reported_at"
        case Version = "version"
        case LocationId = "location_id"
    }
    
//    required public init(from decoder: Decoder) throws {
//        
//        let container = try decoder.container(keyedBy: CodingKeys.self)
//        
//        self.DisputeId = try container.decodeIfPresent(String.self, forKey: .DisputeId)
//        self.Id = try container.decodeIfPresent(String.self, forKey: .Id)
//        self.AmountMoney = try container.decodeIfPresent(Money.self, forKey: .AmountMoney)
//        self.Reason = try container.decodeIfPresent(String.self, forKey: .Reason)
//        self.State = try container.decodeIfPresent(DisputeState.self, forKey: .State)
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .DueAt), !dateString.isEmpty {
//            self.DueAt = try dateString.decode_RFC3339_Date(container, forKey: .DueAt)
//        }
//        self.disputedPayment = try container.decodeIfPresent(DisputedPayment.self, forKey: .disputedPayment)
//        self.EvidenceIds = try container.decodeIfPresent([String].self, forKey: .EvidenceIds)
//        self.cardBrand = try container.decodeIfPresent(CardBrand.self, forKey: .cardBrand)
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .CreatedAt), !dateString.isEmpty {
//            self.CreatedAt = try dateString.decode_RFC3339_Date(container, forKey: .CreatedAt)
//        }
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .UpdatedAt), !dateString.isEmpty {
//            self.UpdatedAt = try dateString.decode_RFC3339_Date(container, forKey: .UpdatedAt)
//        }
//        self.BrandDisputeId = try container.decodeIfPresent(String.self, forKey: .BrandDisputeId)
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .ReportedDate), !dateString.isEmpty {
//            self.ReportedDate = try dateString.decode_RFC3339_Date(container, forKey: .ReportedDate)
//        }
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .ReportedAt), !dateString.isEmpty {
//            self.ReportedAt = try dateString.decode_RFC3339_Date(container, forKey: .ReportedAt)
//        }
//        self.Version = try container.decodeIfPresent(Int.self, forKey: .Version)
//        self.LocationId = try container.decodeIfPresent(String.self, forKey: .LocationId)
//    }
}
