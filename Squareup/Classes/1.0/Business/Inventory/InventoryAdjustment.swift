//
//  InventoryAdjustment.swift
//  Squareup
//
//  Created by user on 7.06.23.
//

import Foundation

/// - InventoryAdjustment: Represents a change in state or quantity of product inventory at a particular time and location.
/// https://developer.squareup.com/reference/square/objects/InventoryAdjustment
open class InventoryAdjustment: Codable {
    
    /// - Id: A unique ID generated by Square for the InventoryAdjustment.
    /// Max Length 100
    var Id: String?
    /// - ReferenceId: An optional ID provided by the application to tie the InventoryAdjustment to an external system.
    /// Max Length 255
    var ReferenceId: String?
    /// - FromState: The inventory state of the related quantity of items before the adjustment.
    var FromState: InventoryState?
    /// - ToState: The inventory state of the related quantity of items after the adjustment.
    var ToState: InventoryState?
    /// - LocationId: The Square-generated ID of the Location where the related quantity of items is being tracked.
    /// Max Length 100
    var LocationId: String?
    /// - CatalogObjectId: The Square-generated ID of the CatalogObject being tracked.
    /// Max Length 100
    var CatalogObjectId: String?
    /// - catalogObjectType: The type of the CatalogObject being tracked.
    var catalogObjectType: CatalogObjectType?
    /// - Quantity: The number of items affected by the adjustment as a decimal string. Can support up to 5 digits after the decimal point.
    /// Max Length 26
    var Quantity: String?
    /// - TotalPriceMoney: Read only The total price paid for goods associated with the adjustment. Present if and only if to_state is SOLD. Always non-negative.
    var TotalPriceMoney: Money?
    /// - OccurredAt: A client-generated RFC 3339-formatted timestamp that indicates when the inventory adjustment took place. For inventory adjustment updates, the occurred_at timestamp cannot be older than 24 hours or in the future relative to the time of the request.
    /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
    ///
    /// UTC: 2020-01-26T02:25:34Z
    ///
    /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
    /// Max Length 34
//    var OccurredAt: Date?
    @FormattedDate<RFC3339_Strategy> var OccurredAt: Date?
    /// - CreatedAt: Read only An RFC 3339-formatted timestamp that indicates when the inventory adjustment is received.
    /// Examples for January 25th, 2020 6:25:34pm Pacific Standard Time:
    ///
    /// UTC: 2020-01-26T02:25:34Z
    ///
    /// Pacific Standard Time with UTC offset: 2020-01-25T18:25:34-08:00
    /// Max Length 34
//    var CreatedAt: Date?
    @FormattedDate<RFC3339_Strategy> var CreatedAt: Date?
    /// - Source: Read only Information about the application that caused the inventory adjustment.
    var Source: SourceApplication?
    /// - EmployeeId: The Square-generated ID of the Employee responsible for the inventory adjustment.
    /// Max Length 100
    var EmployeeId: String?
    /// - TeamMemberId: The Square-generated ID of the Team Member responsible for the inventory adjustment.
    /// Max Length 100
    var TeamMemberId: String?
    /// - TransactionId: Read only The Square-generated ID of the Transaction that caused the adjustment. Only relevant for payment-related state transitions.
    /// Max Length 255
    var TransactionId: String?
    /// - RefundId: Read only The Square-generated ID of the Refund that caused the adjustment. Only relevant for refund-related state transitions.
    /// Max Length  255
    var RefundId: String?
    /// - PurchaseOrderId: Read only The Square-generated ID of the purchase order that caused the adjustment. Only relevant for state transitions from the Square for Retail app.
    /// Max Length 100
    var PurchaseOrderId: String?
    /// - GoodsReceiptId: Read only The Square-generated ID of the goods receipt that caused the adjustment. Only relevant for state transitions from the Square for Retail app.
    /// Max Length 100
    var GoodsReceiptId: String?
    /// - AdjustmentGroup: Read only An adjustment group bundling the related adjustments of item variations through stock conversions in a single inventory event.
    var AdjustmentGroup: InventoryAdjustmentGroup?
    
    enum CodingKeys: String, CodingKey {
        case Id = "id"
        case ReferenceId = "reference_id"
        case FromState = "from_state"
        case ToState = "to_state"
        case LocationId = "location_id"
        case CatalogObjectId = "catalog_object_id"
        case catalogObjectType = "catalog_object_type"
        case Quantity = "quantity"
        case TotalPriceMoney = "total_price_money"
        case OccurredAt = "occurred_at"
        case CreatedAt = "created_at"
        case Source = "source"
        case EmployeeId = "employee_id"
        case TeamMemberId = "team_member_id"
        case TransactionId = "transaction_id"
        case RefundId = "refund_id"
        case PurchaseOrderId = "purchase_order_id"
        case GoodsReceiptId = "goods_receipt_id"
        case AdjustmentGroup = "adjustment_group"
    }
    
//    required public init(from decoder: Decoder) throws {
//        
//        let container = try decoder.container(keyedBy: CodingKeys.self)
//        
//        self.Id = try container.decodeIfPresent(String.self, forKey: .Id)
//        self.ReferenceId = try container.decodeIfPresent(String.self, forKey: .ReferenceId)
//        self.FromState = try container.decodeIfPresent(InventoryState.self, forKey: .FromState)
//        self.ToState = try container.decodeIfPresent(InventoryState.self, forKey: .ToState)
//        self.LocationId = try container.decodeIfPresent(String.self, forKey: .LocationId)
//        self.CatalogObjectId = try container.decodeIfPresent(String.self, forKey: .CatalogObjectId)
//        self.catalogObjectType = try container.decodeIfPresent(CatalogObjectType.self, forKey: .catalogObjectType)
//        self.Quantity = try container.decodeIfPresent(String.self, forKey: .Quantity)
//        self.TotalPriceMoney = try container.decodeIfPresent(Money.self, forKey: .TotalPriceMoney)
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .OccurredAt), !dateString.isEmpty {
//            self.OccurredAt = try dateString.decode_RFC3339_Date(container, forKey: .OccurredAt)
//        }
//        if let dateString = try? container.decodeIfPresent(String.self, forKey: .CreatedAt), !dateString.isEmpty {
//            self.CreatedAt = try dateString.decode_RFC3339_Date(container, forKey: .CreatedAt)
//        }
//        self.Source = try container.decodeIfPresent(SourceApplication.self, forKey: .Source)
//        self.EmployeeId = try container.decodeIfPresent(String.self, forKey: .EmployeeId)
//        self.TeamMemberId = try container.decodeIfPresent(String.self, forKey: .TeamMemberId)
//        self.TransactionId = try container.decodeIfPresent(String.self, forKey: .TransactionId)
//        self.RefundId = try container.decodeIfPresent(String.self, forKey: .RefundId)
//        self.PurchaseOrderId = try container.decodeIfPresent(String.self, forKey: .PurchaseOrderId)
//        self.GoodsReceiptId = try container.decodeIfPresent(String.self, forKey: .GoodsReceiptId)
//        self.AdjustmentGroup = try container.decodeIfPresent(InventoryAdjustmentGroup.self, forKey: .AdjustmentGroup)
//    }
}
