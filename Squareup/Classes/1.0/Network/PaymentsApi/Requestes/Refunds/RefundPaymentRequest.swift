//
//  RefundPaymentRequest.swift
//  Squareup
//
//  Created by user on 2.07.23.
//

import Foundation

internal class RefundPaymentRequest: Codable {
    
    /// - IdempotencyKey: A unique string that identifies this RefundPayment request. The key can be any valid string but must be unique for every RefundPayment request.
    /// Keys are limited to a max of 45 characters - however, the number of allowed characters might be less than 45, if multi-byte characters are used.
    /// For more information, see Idempotency.
    /// Min Length 1
    var IdempotencyKey: String?
    /// - AmountMoney: The amount of money to refund.
    /// This amount cannot be more than the total_money value of the payment minus the total amount of all previously completed refunds for this payment.
    /// This amount must be specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents). For more information, see Working with Monetary Amounts.
    /// The currency code must match the currency associated with the business that is charging the card.
    var AmountMoney: Money?
    /// - AppFeeMoney: The amount of money the developer contributes to help cover the refunded amount. This amount is specified in the smallest denomination of the applicable currency (for example, US dollar amounts are specified in cents).
    /// The value cannot be more than the amount_money.
    /// You can specify this parameter in a refund request only if the same parameter was also included when taking the payment. This is part of the application fee scenario the API supports. For more information, see Take Payments and Collect Fees.
    /// To set this field, PAYMENTS_WRITE_ADDITIONAL_RECIPIENTS OAuth permission is required. For more information, see Permissions.
    var AppFeeMoney: Money?
    /// - PaymentId: The unique ID of the payment being refunded. Required when unlinked=false, otherwise must not be set.
    var PaymentId: String?
    /// - DestinationId: The ID indicating where funds will be refunded to, if this is an unlinked refund. This can be any of the following: A token generated by Web Payments SDK; a card-on-file identifier. Required for requests specifying unlinked=true. Otherwise, if included when unlinked=false, will throw an error.
    var DestinationId: String?
    /// - Unlinked: Indicates that the refund is not linked to a Square payment. If set to true, destination_id and location_id must be supplied while payment_id must not be provided.
    var Unlinked: Bool?
    /// - LocationId: The location ID associated with the unlinked refund. Required for requests specifying unlinked=true. Otherwise, if included when unlinked=false, will throw an error.
    /// Max Length 50
    var LocationId: String?
    /// - CustomerId: The Customer ID of the customer associated with the refund. This is required if the destination_id refers to a card on file created using the Cards API. Only allowed when unlinked=true.
    var CustomerId: String?
    /// - Reason: A description of the reason for the refund.
    /// Max Length 192
    var Reason: String?
    /// - PaymentVersionToken: Used for optimistic concurrency. This opaque token identifies the current Payment version that the caller expects. If the server has a different version of the Payment, the update fails and a response with a VERSION_MISMATCH error is returned. If the versions match, or the field is not provided, the refund proceeds as normal.
    var PaymentVersionToken: String?
    /// - TeamMemberId: An optional TeamMember ID to associate with this refund.
    /// Max Length 192
    var TeamMemberId: String?
    
    enum CodingKeys: String, CodingKey {
        case IdempotencyKey = "idempotency_key"
        case AmountMoney = "amount_money"
        case AppFeeMoney = "app_fee_money"
        case PaymentId = "payment_id"
        case DestinationId = "destination_id"
        case Unlinked = "unlinked"
        case LocationId = "location_id"
        case CustomerId = "customer_id"
        case Reason = "reason"
        case PaymentVersionToken = "payment_version_token"
        case TeamMemberId = "team_member_id"
    }
}
